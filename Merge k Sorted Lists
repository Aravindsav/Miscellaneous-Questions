/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

public ListNode getMid(ListNode head){
    ListNode slow = head;
    ListNode fast = head.next;
    while(fast!=null && fast.next!=null){
        slow = slow.next;
        fast = fast.next.next;
    }
    return slow;
}

public ListNode merge(ListNode left,ListNode right){
    ListNode dummy = new ListNode(-1);
    ListNode temp = dummy;

    while(left!=null && right!=null){
        if(left.val<=right.val){
            temp.next = left;
            left = left.next;
        }else{
            temp.next = right;
            right = right.next;
        }
        temp = temp.next;
    }

if(left!=null){
    temp.next = left;
}
if(right!=null){
    temp.next = right;
}
return dummy.next;

}


public ListNode mergesort(ListNode head){
    if(head==null || head.next==null){
        return head;
    }

ListNode mid = getMid(head);
ListNode right = mid.next;
mid.next = null;
ListNode newleft =mergesort(head);
ListNode newright=mergesort(right);

return merge(newleft,newright);
}


    public ListNode mergeKLists(ListNode[] lists) {

ListNode dummy = new ListNode(-1);
ListNode temp = dummy;
for(int i =0;i<lists.length;i++){
    ListNode head = lists[i];
    while(head!=null){
        temp.next = head;
        head = head.next;
        temp = temp.next;
    }
}

ListNode ll = dummy.next;

return mergesort(ll);

        
    }
}